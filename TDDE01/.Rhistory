summary(U)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
dim(a$S)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
a$W
a$K %*% a$W
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
dim(W_dot)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
plot(a$X, main = "Pre-processed data")
a$X
dim(a$X)
res
res$x
dim(res$x)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
a$X[,2]
a$X[,1]
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
?pls
install.packages("pls")
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
data1
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
datafit
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
?pcr
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
?boot
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
library(boot)
# computing bootstrap samples
f=function(data, ind){
data1=data[ind,] # extract bootstrap sample
res=lm(EX~MET, data=data1) #fit linear model
#predict values for all MET values from the original data
EXP=predict(res,newdata=reorderedData)
return(EXP)
}
res=boot(reorderedData, f, R=1000) #make bootstrap
e=envelope(res) #compute confidence bands
fit=lm(EX~MET, data=reorderedData)
EXP=predict(fit)
plot(reorderedData$MET, reorderedData$EX, pch=21, bg="orange",xlab="MET",ylab="EX")
points(reorderedData$MET,EXP,type="l") #plot fitted line
#plot cofidence bands
points(reorderedData$MET,e$point[2,], type="l", col="blue")
points(reorderedData$MET,e$point[1,], type="l", col="blue")
?lm
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
library(tree)
set.seed(12345)
tree_model = tree(EX~MET,data=reorderedData,control = tree.control(48, minsize=8))
cv.tree_model = cv.tree(tree_model)
best.size = cv.tree_model$size[which(cv.tree_model$dev==min(cv.tree_model$dev))]
cv.tree_model.pruned = prune.tree(tree_model, best=best.size)
plot(cv.tree_model.pruned)
text(cv.tree_model.pruned,pretty=0)
datafit=predict(cv.tree_model.pruned, newdata=reorderedData)
plot(datafit,reorderedData$EX,pch=21, bg="orange",xlab="Original Data EX",ylab="Fitted Data EX")
residualdata = (datafit-reorderedData$EX)
resmatrix = data.matrix(residualdata)
hist(resmatrix, plot = TRUE, col = "blue", main="Histogram of Residuals",xlab="Residual")
?boot
?envelope
?envelope
e$overall
e$point
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
############
###Step 1###
############
data = read.csv2('State.csv')
reorderedData = data[order(data$MET),]
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
############
###Step 2###
############
library(tree)
set.seed(12345)
tree_model = tree(EX~MET,data=reorderedData,control = tree.control(48, minsize=8))
cv.tree_model = cv.tree(tree_model)
best.size = cv.tree_model$size[which(cv.tree_model$dev==min(cv.tree_model$dev))]
cv.tree_model.pruned = prune.tree(tree_model, best=best.size)
plot(cv.tree_model.pruned)
text(cv.tree_model.pruned,pretty=0)
datafit=predict(cv.tree_model.pruned, newdata=reorderedData)
plot(datafit,reorderedData$EX,pch=21, bg="orange",xlab="Original Data EX",ylab="Fitted Data EX")
residualdata = (datafit-reorderedData$EX)^2
resmatrix = data.matrix(residualdata)
hist(resmatrix, plot = TRUE, col = "blue", main="Histogram of Residuals",xlab="Residual")
############
###Step 1###
############
data = read.csv2('State.csv')
reorderedData = data[order(data$MET),]
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
############
###Step 2###
############
library(tree)
set.seed(12345)
tree_model = tree(EX~MET,data=reorderedData,control = tree.control(48, minsize=8))
cv.tree_model = cv.tree(tree_model)
best.size = cv.tree_model$size[which(cv.tree_model$dev==min(cv.tree_model$dev))]
cv.tree_model.pruned = prune.tree(tree_model, best=best.size)
plot(cv.tree_model.pruned)
text(cv.tree_model.pruned,pretty=0)
datafit=predict(cv.tree_model.pruned, newdata=reorderedData)
plot(datafit,reorderedData$EX,pch=21, bg="orange",xlab="Original Data EX",ylab="Fitted Data EX")
residualdata = (datafit-reorderedData$EX)^2
resmatrix = data.matrix(residualdata)
hist(resmatrix, plot = TRUE, col = "blue", main="Histogram of Residuals",xlab="Residual")
?plot
datafit=predict(cv.tree_model.pruned, newdata=reorderedData)
summary(datafit)
residual(datafit)
res(datafit)
resid(datafit)
residuals(datafit)
?residuals
residuals(datafit)
datafit
residuals(cv.tree_model.pruned)
plot(residuals(cv.tree_model.pruned))
hist(residuals(cv.tree_model.pruned))
############
###Step 1###
############
data = read.csv2('State.csv')
reorderedData = data[order(data$MET),]
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
############
###Step 2###
############
library(tree)
set.seed(12345)
tree_model = tree(EX~MET,data=reorderedData,control = tree.control(48, minsize=8))
cv.tree_model = cv.tree(tree_model)
best.size = cv.tree_model$size[which(cv.tree_model$dev==min(cv.tree_model$dev))]
cv.tree_model.pruned = prune.tree(tree_model, best=best.size)
plot(cv.tree_model.pruned)
text(cv.tree_model.pruned,pretty=0)
plot(cv.tree_model.pruned,reorderedData$EX,pch=21, bg="orange",xlab="Original Data EX",ylab="Fitted Data EX")
residualdata = residuals(cv.tree_model.pruned)
resmatrix = data.matrix(residualdata)
hist(resmatrix, plot = TRUE, col = "blue", main="Histogram of Residuals",xlab="Residual")
############
###Step 1###
############
data = read.csv2('State.csv')
reorderedData = data[order(data$MET),]
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
############
###Step 2###
############
library(tree)
set.seed(12345)
tree_model = tree(EX~MET,data=reorderedData,control = tree.control(48, minsize=8))
cv.tree_model = cv.tree(tree_model)
best.size = cv.tree_model$size[which(cv.tree_model$dev==min(cv.tree_model$dev))]
cv.tree_model.pruned = prune.tree(tree_model, best=best.size)
plot(cv.tree_model.pruned)
text(cv.tree_model.pruned,pretty=0)
plot(cv.tree_model.pruned,reorderedData$EX,pch=21, bg="orange",xlab="Original Data EX",ylab="Fitted Data EX")
residualdata = residuals(cv.tree_model.pruned)
resmatrix = data.matrix(residualdata)
hist(resmatrix, plot = TRUE, col = "blue", main="Histogram of Residuals",xlab="Residual")
reorderedData$EX
dim(reorderedData$EX)
length(reorderedData$EX)
############
###Step 1###
############
data = read.csv2('State.csv')
reorderedData = data[order(data$MET),]
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
############
###Step 2###
############
library(tree)
set.seed(12345)
tree_model = tree(EX~MET,data=reorderedData,control = tree.control(48, minsize=8))
cv.tree_model = cv.tree(tree_model)
best.size = cv.tree_model$size[which(cv.tree_model$dev==min(cv.tree_model$dev))]
cv.tree_model.pruned = prune.tree(tree_model, best=best.size)
plot(cv.tree_model.pruned)
text(cv.tree_model.pruned,pretty=0)
plot(cv.tree_model.pruned,reorderedData$EX,pch=21, bg="orange",xlab="Original Data EX",ylab="Fitted Data EX")
residualdata = residuals(cv.tree_model.pruned)
resmatrix = data.matrix(residualdata)
hist(resmatrix, plot = TRUE, col = "blue", main="Histogram of Residuals",xlab="Residual")
?residuals()
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
############
###Step 1###
############
data = read.csv2('NIRspectra.csv')
data1 = data
data1$Viscosity=c()
res=prcomp(data1) #Perform PCA on the data matrix
lambda=res$sdev^2 #eigenvalues
#proportion of variation
sprintf("%2.3f",lambda/sum(lambda)*100)
screeplot(res)
U=res$rotation #Rotation of the PCA:s
head(U)
plot(res$x[,1], res$x[,2],ylab="PC2",xlab="PC1") #a plot of the scores in the coordinates (PC1, PC2)
############
###Step 2###
############
plot(U[,1],main="Traceplot, PC1",ylab = "PC1")
plot(U[,2],main="Traceplot, PC2",ylab = "PC2")
plot(U[,3],main="Traceplot, PC3",ylab = "PC3")
############
###Step 3###
############
library(fastICA)
set.seed(12345)
#See 4a PPT. 28-31
# a)
a = fastICA(data, 3, alg.typ = "parallel", fun = "logcosh", alpha = 1,
method = "R", row.norm = FALSE, maxit = 200, tol = 0.0001, verbose = TRUE) #ICA
W_dot = a$K %*% a$W
plot(W_dot[,1], main="Traceplot of W'")
plot(W_dot[,2], main="Traceplot of W'")
plot(W_dot[,3], main="Traceplot of W'")
# b)
plot(a$X[,1], a$X[,2],ylab="PC2",xlab="PC1")
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
############
###Step 1###
############
data = read.csv2('State.csv')
reorderedData = data[order(data$MET),]
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
############
###Step 2###
############
library(tree)
set.seed(12345)
tree_model = tree(EX~MET,data=reorderedData,control = tree.control(48, minsize=8))
cv.tree_model = cv.tree(tree_model)
best.size = cv.tree_model$size[which(cv.tree_model$dev==min(cv.tree_model$dev))]
cv.tree_model.pruned = prune.tree(tree_model, best=best.size)
plot(cv.tree_model.pruned)
text(cv.tree_model.pruned,pretty=0)
plot(cv.tree_model.pruned,reorderedData$EX,pch=21, bg="orange",xlab="Original Data EX",ylab="Fitted Data EX")
residualdata = residuals(cv.tree_model.pruned)
resmatrix = data.matrix(residualdata)
hist(resmatrix, plot = TRUE, col = "blue", main="Histogram of Residuals",xlab="Residual")
cv.tree_model.pruned
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
best.size
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
############
###Step 1###
############
data = read.csv2('State.csv')
reorderedData = data[order(data$MET),]
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
############
###Step 2###
############
library(tree)
set.seed(12345)
tree_model = tree(EX~MET,data=reorderedData,control = tree.control(48, minsize=8))
cv.tree_model = cv.tree(tree_model)
best.size = cv.tree_model$size[which(cv.tree_model$dev==min(cv.tree_model$dev))]
cv.tree_model.pruned = prune.tree(tree_model, best=best.size)
plot(cv.tree_model.pruned)
text(cv.tree_model.pruned,pretty=0)
datafit = predict(cv.tree_model.pruned,newdata=reorderedData)
plot(reorderedData$EX,datafit,pch=21, bg="orange",xlab="Original Data EX",ylab="Fitted Data EX")
residualdata = residuals(cv.tree_model.pruned)
resmatrix = data.matrix(residualdata)
hist(resmatrix, plot = TRUE, col = "blue", main="Histogram of Residuals",xlab="Residual")
############
plot(reorderedData,pch=21, bg="orange",xlab="Original Data EX",ylab="Fitted Data EX")
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
points(datafit)
############
###Step 1###
############
data = read.csv2('State.csv')
reorderedData = data[order(data$MET),]
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
############
###Step 2###
############
library(tree)
set.seed(12345)
tree_model = tree(EX~MET,data=reorderedData,control = tree.control(48, minsize=8))
cv.tree_model = cv.tree(tree_model)
best.size = cv.tree_model$size[which(cv.tree_model$dev==min(cv.tree_model$dev))]
cv.tree_model.pruned = prune.tree(tree_model, best=best.size)
plot(cv.tree_model.pruned)
text(cv.tree_model.pruned,pretty=0)
datafit = predict(cv.tree_model.pruned,newdata=reorderedData)
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
points(datafit,type="l")
residualdata = residuals(cv.tree_model.pruned)
resmatrix = data.matrix(residualdata)
hist(resmatrix, plot = TRUE, col = "blue", main="Histogram of Residuals",xlab="Residual")
############
dim(reorderedData)
datafit
reorderedData
############
###Step 1###
############
data = read.csv2('State.csv')
reorderedData = data[order(data$MET),]
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
############
###Step 2###
############
library(tree)
set.seed(12345)
tree_model = tree(EX~MET,data=reorderedData,control = tree.control(87, minsize=8))
cv.tree_model = cv.tree(tree_model)
best.size = cv.tree_model$size[which(cv.tree_model$dev==min(cv.tree_model$dev))]
cv.tree_model.pruned = prune.tree(tree_model, best=best.size)
plot(cv.tree_model.pruned)
text(cv.tree_model.pruned,pretty=0)
datafit = predict(cv.tree_model.pruned,newdata=reorderedData)
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
points(datafit,type="l")
residualdata = residuals(cv.tree_model.pruned)
resmatrix = data.matrix(residualdata)
hist(resmatrix, plot = TRUE, col = "blue", main="Histogram of Residuals",xlab="Residual")
############
###Step 1###
############
data = read.csv2('State.csv')
reorderedData = data[order(data$MET),]
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
############
###Step 2###
############
library(tree)
set.seed(12345)
tree_model = tree(EX~MET,data=reorderedData,control = tree.control(48, minsize=8))
cv.tree_model = cv.tree(tree_model)
best.size = cv.tree_model$size[which(cv.tree_model$dev==min(cv.tree_model$dev))]
cv.tree_model.pruned = prune.tree(tree_model, best=best.size)
plot(cv.tree_model.pruned)
text(cv.tree_model.pruned,pretty=0)
datafit = predict(cv.tree_model.pruned,newdata=reorderedData)
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
points(datafit,type="l")
residualdata = residuals(cv.tree_model.pruned)
resmatrix = data.matrix(residualdata)
hist(resmatrix, plot = TRUE, col = "blue", main="Histogram of Residuals",xlab="Residual")
############
###Step 1###
############
data = read.csv2('State.csv')
reorderedData = data[order(data$MET),]
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
############
###Step 2###
############
library(tree)
set.seed(12345)
tree_model = tree(EX~MET,data=reorderedData,control = tree.control(48, minsize=8))
cv.tree_model = cv.tree(tree_model)
best.size = cv.tree_model$size[which(cv.tree_model$dev==min(cv.tree_model$dev))]
cv.tree_model.pruned = prune.tree(tree_model, best=best.size)
plot(cv.tree_model.pruned)
text(cv.tree_model.pruned,pretty=0)
datafit = predict(cv.tree_model.pruned,newdata=reorderedData)
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
points(datafit,reorderedData$EX,type="l")
############
###Step 1###
############
data = read.csv2('State.csv')
reorderedData = data[order(data$MET),]
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
############
###Step 2###
############
library(tree)
set.seed(12345)
tree_model = tree(EX~MET,data=reorderedData,control = tree.control(48, minsize=8))
cv.tree_model = cv.tree(tree_model)
best.size = cv.tree_model$size[which(cv.tree_model$dev==min(cv.tree_model$dev))]
cv.tree_model.pruned = prune.tree(tree_model, best=best.size)
plot(cv.tree_model.pruned)
text(cv.tree_model.pruned,pretty=0)
datafit = predict(cv.tree_model.pruned,newdata=reorderedData)
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
points(reorderedData$MET,datafit,type="l")
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
############
###Step 1###
############
data = read.csv2('State.csv')
reorderedData = data[order(data$MET),]
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
############
###Step 2###
############
library(tree)
set.seed(12345)
tree_model = tree(EX~MET,data=reorderedData,control = tree.control(48, minsize=8))
cv.tree_model = cv.tree(tree_model)
best.size = cv.tree_model$size[which(cv.tree_model$dev==min(cv.tree_model$dev))]
cv.tree_model.pruned = prune.tree(tree_model, best=best.size)
plot(cv.tree_model.pruned)
text(cv.tree_model.pruned,pretty=0)
datafit = predict(cv.tree_model.pruned,newdata=reorderedData)
plot(reorderedData$MET,reorderedData$EX,pch=21, bg="orange",xlab="MET",ylab="EX")
points(reorderedData$MET,datafit,type="l")
residualdata = residuals(cv.tree_model.pruned)
resmatrix = data.matrix(residualdata)
hist(resmatrix, plot = TRUE, col = "blue", main="Histogram of Residuals",xlab="Residual")
############
###Step 3###
############
library(boot)
# computing bootstrap samples
f=function(data, ind){
data1=data[ind,] # extract bootstrap sample
res=tree(EX~MET, data=data1) #fit linear model
#predict values for all MET values from the original data
EXP=predict(res,newdata=reorderedData)
return(EXP)
}
res=boot(reorderedData, f, R=1000) #make bootstrap
e=envelope(res) #compute confidence bands
fit=tree(EX~MET, data=reorderedData)
EXP=predict(fit)
plot(reorderedData$MET, reorderedData$EX, pch=21, bg="orange",xlab="MET",ylab="EX", ylim=c(150,460))
points(reorderedData$MET,EXP,type="l") #plot fitted line
#plot cofidence bands
points(reorderedData$MET,e$point[2,], type="l", col="blue")
points(reorderedData$MET,e$point[1,], type="l", col="blue")
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
e2=envelope(res2) #compute confidence bands
plot(reorderedData$MET, reorderedData$EX, pch=21, bg="orange",xlab="MET",ylab="EX", ylim=c(150,460))
points(reorderedData$MET,EXP,type="l") #plot fitted line
#plot confidence bands
points(reorderedData$MET,e2$point[2,], type="l", col="blue")
points(reorderedData$MET,e2$point[1,], type="l", col="blue")
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.R', echo=TRUE)
`hist
?hist
;
)
""
''
CC
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
?
!
dfasdf
sd
dfc
+
source('~/MyGitMap/TDDE01/TDDE01 Lab 4.2.R', echo=TRUE)
