<<<<<<< HEAD
source('~/MyGitMap/TDDE01/TDDE01 Lab 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/TDDE01 Lab 1.2.R', echo=TRUE)
setwd("~/MyGitMap/TDDE01/Lab 4")
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.R', echo=TRUE)
library(boot)
# computing bootstrap samples
f=function(data, ind){
data1=data[ind,] # extract bootstrap sample
res=tree(EX~MET, data=data1) #fit tree model
#predict values for all MET values from the original data
EXP=predict(prune.tree(res, best=best.size),newdata=reorderedData)
return(EXP)
}
res=boot(reorderedData, f, R=1000) #make bootstrap
e=envelope(res) #compute confidence bands
fit=cv.tree_model.pruned
EXP=predict(fit)
plot(reorderedData$MET, reorderedData$EX, pch=21, bg="orange",xlab="MET",ylab="EX", ylim=c(150,460))
points(reorderedData$MET,EXP,type="l") #plot fitted line
#plot cofidence bands
points(reorderedData$MET,e$point[2,], type="l", col="blue")
points(reorderedData$MET,e$point[1,], type="l", col="blue")
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.R', echo=TRUE)
mle = cv.tree_model.pruned
rng=function(data, mle) {
data1=data.frame(EX=data$EX,MET=data$MET)
n=length(data$EX)
#generate new EX
data1$EX=rnorm(n,predict(mle, newdata=data1),sd(residuals(mle)))
return(data1)
}
f1=function(data1){
res=tree(EX~MET, data=data1) #fit tree model
#predict values for all MET values from the original data
EXP=predict(prune.tree(res, best=best.size),newdata=reorderedData)
n=length(reorderedData$EX)
predictedEXP=rnorm(n,EXP, sd(residuals(mle)))
return(predictedEXP)
}
f2=function(data1){
res=tree(EX~MET, data=data1) #fit tree model
#predict values for all Area values from the original data
EXP=predict(prune.tree(res, best=best.size),newdata=reorderedData)
return(EXP)
}
res=boot(reorderedData, statistic=f1, R=10000, mle=mle,ran.gen=rng, sim="parametric") #make bootstrap
res2=boot(reorderedData, statistic=f2, R=1000, mle=mle,ran.gen=rng, sim="parametric") #make bootstrap
e=envelope(res) #compute prediction bands
e2=envelope(res2) #compute confidence bands
fit=cv.tree_model.pruned
EXP=predict(fit)
plot(reorderedData$MET, reorderedData$EX, pch=21, bg="orange",xlab="MET",ylab="EX", ylim=c(150,460))
points(reorderedData$MET,EXP,type="l") #plot fitted line
#plot prediction bands
points(reorderedData$MET,e$point[2,], type="l", col="blue")
points(reorderedData$MET,e$point[1,], type="l", col="blue")
plot(reorderedData$MET, reorderedData$EX, pch=21, bg="orange",xlab="MET",ylab="EX", ylim=c(150,460))
points(reorderedData$MET,EXP,type="l") #plot fitted line
#plot confidence bands
points(reorderedData$MET,e2$point[2,], type="l", col="blue")
points(reorderedData$MET,e2$point[1,], type="l", col="blue")
?set.seed
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
?rnorm
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
?fastICA
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
=======
source('~/Documents/Skolgrejer/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
setwd("~/Documents/Skolgrejer/MyGitMap/TDDE01/Lab 4")
source('~/Documents/Skolgrejer/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/Documents/Skolgrejer/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
install.packages("pls")
source('~/Documents/Skolgrejer/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
library(fastICA)
set.seed(12345)
#See 4a PPT. 28-31
# a)
a = fastICA(data, 2, alg.typ = "parallel", fun = "logcosh", alpha = 1,
method = "R", row.norm = FALSE, maxit = 200, tol = 0.0001, verbose = TRUE) #ICA
W_dot = a$K %*% a$W
plot(W_dot[,1], main="Traceplot of W'")
plot(W_dot[,2], main="Traceplot of W'")
# b)
plot(a$S[,2], a$S[,1],ylab="PC2",xlab="PC1")
library("fastICA", lib.loc="N:/R-3.3.2/library")
source('~/Documents/Skolgrejer/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
library(fastICA)
set.seed(12345)
#See 4a PPT. 28-31
# a)
a = fastICA(data, 2, alg.typ = "parallel", fun = "logcosh", alpha = 1,
method = "R", row.norm = FALSE, maxit = 200, tol = 0.0001, verbose = TRUE) #ICA
W_dot = a$K %*% a$W
plot(W_dot[,1], main="Traceplot of W'")
plot(W_dot[,2], main="Traceplot of W'")
# b)
plot(a$S[,1], a$S[,2],ylab="PC2",xlab="PC1")
library(fastICA)
set.seed(12345)
#See 4a PPT. 28-31
# a)
a = fastICA(data, 2, alg.typ = "parallel", fun = "logcosh", alpha = 1,
method = "R", row.norm = FALSE, maxit = 200, tol = 0.0001, verbose = TRUE) #ICA
W_dot = a$K %*% a$W
plot(W_dot[,1], main="Traceplot of W'")
plot(W_dot[,2], main="Traceplot of W'")
# b)
plot(a$S[,2], a$S[,1],ylab="PC2",xlab="PC1")
?fastICA
source('~/Documents/Skolgrejer/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
?fastICA
a$K * a$W
a$K %*% a$W
detach("package:fastICA", unload=TRUE)
source('~/Documents/Skolgrejer/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
source('~/Documents/Skolgrejer/MyGitMap/TDDE01/Lab 4/TDDE01 Lab 4.2.R', echo=TRUE)
>>>>>>> 3062787d84d77252a9b6a97fdfd67a0b6e460f9d
