source('~/MyGitMap/TDDE01/Lab 6/TDDE01 Lab 6.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
setwd("~/MyGitMap/TDDE01/Exams/Exam 2017-01-09")
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
help tree()
help("tree")
?tree
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
?tree
data
Data$Class
data$Class
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
?str
str(data)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
str(data)
data$Class
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
train
newtrain
train[1]
train
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
plot(cv.tree_model)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
train
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
?cv.glmnet
?glmnet
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
library(glmnet)
x_train = model.matrix( ~ .-1, train[,-16])
set.seed(12345)
model=cv.glmnet(x_train,train$Class, alpha=1,family="binomial",lambda = seq(-1,2,0.001))
model$lambda.min
plot(model)
coef(model, s="lambda.min") #22 variables
x_train = model.matrix( ~ .-1, train[,-16])
set.seed(12345)
model=cv.glmnet(x_train,train$Class, alpha=1,family="binomial",lambda = seq(0,2,0.001))
model$lambda.min
plot(model)
coef(model, s="lambda.min") #22 variables
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
set.seed(12345)
model=cv.glmnet(x_train,train$Class, alpha=1,family="gaussian",lambda = seq(0,2,0.001))
model$lambda.min
plot(model)
coef(model, s="lambda.min") #22 variables
set.seed(12345)
model=cv.glmnet(x_train,train$Class, alpha=1,family="poisson",lambda = seq(0,2,0.001))
model$lambda.min
plot(model)
coef(model, s="lambda.min") #22 variables
set.seed(12345)
model=cv.glmnet(x_train,train$Class, alpha=1,family="multinomial",lambda = seq(0,2,0.001))
model$lambda.min
plot(model)
coef(model, s="lambda.min") #22 variables
set.seed(12345)
model=cv.glmnet(x_train,train$Class, alpha=1,family="cox",lambda = seq(0,2,0.001))
model$lambda.min
plot(model)
coef(model, s="lambda.min") #22 variables
set.seed(12345)
model=cv.glmnet(x_train,train$Class, alpha=1,family="mgaussian",lambda = seq(0,2,0.001))
model$lambda.min
plot(model)
coef(model, s="lambda.min") #22 variables
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
help cv.glmnet
?cv.glmnet
?glmnet
x_train
test
size(test)
length(test)
test
test[1,:]
test[1,]
?pred
?predict
predict(tree_model,test[i,],type="class")
predict(tree_model,test[i,])
predict(tree_model,test[1,])
predict(tree_model,test[1,],type="class")
predict(tree_model,test[1,])
predict(tree_model,test[,])
predict(tree_model,test[2,])
predict(tree_model,test[3,])
predict(tree_model,test[4,])
predict(tree_model,test[10,])
predict(tree_model,test[15,])
predict(tree_model,test[135,])
test[i,]
test[1,]
test[1,]$Class
predict(tree_model,test[i,]$Class)
predict(tree_model,test[1,]$Class)
predict(tree_model,test[1,])
i=1
p_hat = predict(X,Y[i,])
p_hat = predict(tree_model,test[i,])
p_hat
1-p_hat
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
E(tree_model,test)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
error
E(tree_model,test)
?predict
E(model,test)
model
tree_model
tree_model2
E(tree_model2,test)
E(tree_model,test)
log(0.4)
moj
'moj'
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
error2
error1
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
error
error1
error2
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
error1
error2
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
str(data)
data$Class
str(data)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
setwd("~/MyGitMap/TDDE01/Exams/Exam 2017-01-09")
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
setwd("~/MyGitMap/TDDE01/Exams/Exam 2017-01-09")
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
tree_model
test
clear
E(tree_model,test)
test[1,]$Class
predict(tree_model,test[1,])
predict(tree_model,test[1,]$Class)
predict(tree_model,test[1,])
test[1,]
str(data)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
model$lambda.min
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
library(glmnet)
x_train = model.matrix( ~ .-1, train[,-16])
set.seed(12345)
model=cv.glmnet(x_train,train$Class, alpha=1,family="binomial",lambda = seq(0,2,0.001))
model$lambda.min #0.009
plot(model)
coef(model, s="lambda.min") #22 variables
library(glmnet)
x_train = model.matrix( ~ .-1, train[,-16])
set.seed(12345)
model=cv.glmnet(x_train,train$Class, alpha=1,family="binomial",lambda = seq(0,2,0.001))
model$lambda.min #0.009
plot(model)
coef(model, s="lambda.min") #22 variables
library(glmnet)
x_train = model.matrix( ~ .-1, train[,-16])
set.seed(12345)
model=cv.glmnet(x_train,train$Class, alpha=1,family="binomial")
model$lambda.min #0.009
plot(model)
coef(model, s="lambda.min") #22 variables
model$lambda.min
moj = model$lambda.min
moj
moj = coef(model, s="lambda.min")
moj
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.2.R', echo=TRUE)
install.packages("mboost")
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.2.R', echo=TRUE)
setwd("~/MyGitMap/TDDE01/Exams/Exam 2017-01-09")
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.2.R', echo=TRUE)
E=function(X,Y){
error = 0
for (i in 1:length(Y)) {
p_hat = predict(X,Y[i,])
error = error + Y[i,]$Class*log(p_hat) + (1-Y[i,]$Class)*log(1-p_hat)
}
return(error)
}
error1 = E(tree_model,test)
error2 = E(tree_model2,test)
warnings
?predict
warnings()
predict(tree_model,test[1,])
predict(tree_model,test[3,])
predict(tree_model,test[4,])
predict(tree_model,test[5,])
p_hat = predict(X,Y[1,])
p_hat = predict(tree_model,test[1,])
p_hat
p_hat[1]
p_hat[2]
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
E=function(X,Y){
error = 0
for (i in 1:length(Y)) {
p_hat = predict(X,Y[i,])
error = error + Y[i,]$Class*log(p_hat[2]) + (1-Y[i,]$Class)*log(1-p_hat[2])
}
return(error)
}
error1 = E(tree_model,test)
error2 = E(tree_model2,test)
error1
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
p_hat
p_hat[2]
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
p_hat[2]
p_hat[2]
p_hat[1]
p_hat[2]
p_hat[2]
E=function(X,Y){
error = 0
for (i in 1:length(Y)) {
p_hat = predict(X,Y[i,])
error = error + Y[i,]$Class*log(p_hat[2]) + (1-Y[i,]$Class)*log(1-p_hat[2])
}
return(error)
}
error1 = E(tree_model,test)
error2 = E(tree_model2,test)
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
p_hat[2]
Y[i,]$Class
log(p_hat[2])
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
E=function(X,Y){
error = 0
for (i in 1:length(Y)) {
p_hat = predict(X,Y[i,])
if(Y[i,]$Class == 1){
error = error + Y[i,]$Class*log(p_hat[2])
}else{
error = error + (1-Y[i,]$Class)*log(1-p_hat[2])
}
}
return(error)
}
error1 = E(tree_model,test)
error2 = E(tree_model2,test)
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
Y[i,]$Class
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
Y[i,]$Class*log(p_hat[2])
log(p_hat[2])
Y[i,]$Class
as.numeric(Y[i,]$Class)
Y[i,]$Class
Y[i,]$Class*2
as.matrix(Y[i,]$Class)
as.matrix(Y[i,]$Class)*2
Y[i,]$Class*2
Y[i,]$Class
Y[i,]$Class[1]
moj = Y[i,]$Class[1]
as.numeric(as.character(moj))
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
Y_i
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
Y_i
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
error1
error2
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
error1
error2
error3 = E(model,test)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
model
predict(model,test)
model
tree_model
predict(model,s=bestlam,newx=x[test,])
predict(model,s=bestlam,newx = test)
bestlam=cv.out$lambda.min
lasso.pred=predict(lasso.mod,s=bestlam,newx=x[test,])
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
predict(model,s=bestlam,newx=x[test,])
predict(model,s=bestlam,newx=test)
predict(model,s=bestlam,newx=test[1,])
predict(model,s=bestlam,newx=test[1,])
predict(model,s=bestlam,newx=test)
model.matrix(test)
as.matrix(test)
predict(model,s=bestlam,newx=as.matrix(test)
)
predict(model,s=bestlam,newx=as.matrix(test))
predict(model,s=bestlam,newx=as.matrix(test[1,]))
predict(tree_model,test)
predict(tree_model,test[1,])
predict(tree_model,test[1,])
predict(model,test[1,])
predict(model,s=bestlam,test[1,])
predict(model,s=bestlam,newx=test[1,])
predict(model,s=bestlam,newx=as.matrix(test[1,]))
predict(x_train,s=bestlam,xnew = test)
predict(x_train,s=bestlam,xnew=as.matrix(test))
predict(x_train,s=bestlam,xnew=as.matrix(test[1,]))
predict(model,s=bestlam,xnew=as.matrix(test))
predict(model,s=bestlam,xnew=as.matrix(x_train))
predict(model,s=bestlam,xnew=x_train)
predict(model,s=bestlam,newx=x_train)
predict(model,s=bestlam,newx=test)
predict(model,s=bestlam,newx=test[1,])
predict(model,s=bestlam,newx=as.matrix(test[1,])
predict(model,s=bestlam,newx=as.matrix(test[1,]))
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
model.matrix( ~ .-1, train[,-16])
model.matrix( ~ .-1, train[,16])
model.matrix(Class~ ., train[,16])
model.matrix(Class~ ., test[,16])
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
predict(model,s=bestlam,newx=x_test
)
predict(model,s=bestlam,newx=x_test)
x_test
x_test = model.matrix( ~ .-1, test)
x_test
x_test[1,]
predict(model,newx=x_test)
predict(model,s=bestlam,newx=x_test)
predict(model,s=bestlam,newx=x_test)
predict(model,s=bestlam,newx=x_test)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
predict(model,s=bestlam,newx=x_test)
predict(model,newx=x_test)
predict(model,s=bestlam,newx=x_test)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.2.R', echo=TRUE)
install.packages("kernlab")
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.2.R', echo=TRUE)
data(spam)
spam
read.csv(spam)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.2.R', echo=TRUE)
read(spam)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.2.R', echo=TRUE)
dim(data)
data
data(spam)
spam
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
predict(model,s=bestlam,newx=test)
predict(model,s=bestlam,newx=x_test)
predict(model,s=bestlam,newdata=x_test)
predict(model,s=bestlam,newx=x_test)
predict(model,s=bestlam,newx=x_test,type="class")
help("predict")
predict(model,s=bestlam,newx=x_test,type="response")
predict(model,newx=x_test,type="response")
predict(model,s=bestlam,newx=x_test,type="response")
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
E_Lasso(x_train,x_test)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
E_Lasso(x_train,x_test)
E_Lasso(x_train,x_test)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
length(Y)
size(Y)
size(X)
size(data)
length(data)
Y[1,]
Y
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
Y[i,]
test
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
p_hat
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
error1
error2
error3
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
error1
error2
error3
error1<error2
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
debugSource('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.R', echo=TRUE)
as.factor(Y)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.2.R', echo=TRUE)
?ksvm
?ksvm
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.2.R', echo=TRUE)
miss1 = missclass(mailtype1,train$type)
miss2 = missclass(mailtype2,train$type)
miss3 = missclass(mailtype3,train$type)
miss4 = missclass(mailtype4,train$type)
miss5 = missclass(mailtype5,train$type)
miss6 = missclass(mailtype6,train$type)
missdata = c(miss1,miss2,miss3,miss4,miss5,miss6)
which.min(missdata)
test
test[,58]
miss1
miss2
miss3
miss4
miss5
miss6
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.2.R', echo=TRUE)
source('~/MyGitMap/TDDE01/Exams/Exam 2017-01-09/Exam 1.2.R', echo=TRUE)
table(mailtype1,test[,58])
source('~/MyGitMap/TDDE01/Lab 2/TDDE01 Lab 2.R', echo=TRUE)
model
test
